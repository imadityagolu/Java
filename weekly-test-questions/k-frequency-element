Given an integer array nums and an integer k, return the k most frequent elements.

If 2 elements have same frequency than print them in decreasing order.

Input Format

The first line contains N, i.e. the size of the array.

The second line contains N space-separated positive integers nums[i] denoting elements of the array.

The third line contains integer k.

Constraints

1 <= N <= 10^5

0 <= nums[i] <= 9

k is in the range [1, the number of unique elements in the array].

It is guaranteed that the answer is unique.
Output Format

Return the top k frequent elements.

Sample Input 0

7
1 1 1 2 2 3 3
2
Sample Output 0

1 3


code:-

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input size of the array
        int n = scanner.nextInt();
        int[] nums = new int[n];

        // Input array elements
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        // Input k
        int k = scanner.nextInt();

        // HashMap to store frequencies of elements
        HashMap<Integer, Integer> freqMap = new HashMap<>();
        for (int num : nums) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        }

        // Priority Queue to sort elements by frequency and value
        PriorityQueue<int[]> maxHeap = new PriorityQueue<>((a, b) -> {
            if (b[1] == a[1]) {
                return b[0] - a[0]; // Sort by value in decreasing order if frequencies are the same
            }
            return b[1] - a[1]; // Sort by frequency in decreasing order
        });

        // Add elements to the heap
        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {
            maxHeap.offer(new int[]{entry.getKey(), entry.getValue()});
        }

        // Extract top k elements
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            result.add(maxHeap.poll()[0]);
        }

        // Print the result
        for (int i = 0; i < result.size(); i++) {
            System.out.print(result.get(i));
            if (i < result.size() - 1) {
                System.out.print(" ");
            }
        }

        scanner.close();
    }
}
