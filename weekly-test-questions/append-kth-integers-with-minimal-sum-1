You are given an integer array nums and an integer k. Append k unique positive integers that do not appear in nums to nums such that the resulting total sum is minimum.

Return the sum of the k integers appended to nums.

Input Format

First line contains an integer n.

Second line contains an array of size n.

Third line contains an integer k.

Constraints

1 <= nums.length <= 10^5
    
1 <= nums[i] <= 10^9
    
1 <= k <= 10^8
Output Format

Returns an integer.

Sample Input 0

5
1 4 25 10 25
2
Sample Output 0

5
Explanation 0

The two unique positive integers that do not appear in nums which we append are 2 and 3. The resulting sum of nums is 1 + 4 + 25 + 10 + 25 + 2 + 3 = 70, which is the minimum. The sum of the two integers appended is 2 + 3 = 5, so we return 5.





code:-


import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the size of the array
        int n = scanner.nextInt();

        // Read the array
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        // Read k
        int k = scanner.nextInt();

        // Compute and print the result
        System.out.println(minAppendSum(nums, k));

        scanner.close();
    }
    public static int minAppendSum(int[] nums, int k) {
        // Use a HashSet to track the existing numbers in nums
        Set<Integer> existingNumbers = new HashSet<>();
        for (int num : nums) {
            existingNumbers.add(num);
        }

        int appendedSum = 0;
        int nextInteger = 1;

        // Add the first k unique positive integers not in nums
        while (k > 0) {
            if (!existingNumbers.contains(nextInteger)) {
                appendedSum += nextInteger;
                k--;
            }
            nextInteger++;
        }

        return appendedSum;
    }
}
