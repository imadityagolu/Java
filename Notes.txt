JAVA
-------------
#JAVA is a programming language use to create many different types of applications
* It is a  case sensitive languaga
* robust and secure
* it is a collection of framework
* supports platform independent / cross-platform
* Object-oriented programming language
* high-level language
* follow oops concept
* multiple reader/user (concurrency)
* exception handling techniques



# used to create applications like:-
* web applications (backend)
-- springboot
-- node
* GUI (graphical user interface)
* android mobile applications
* desktop applications
* data structure & algorithms (DSA)



# Data - collection of raw information (unprocessed)

# Data structure - way of shorting data or efficiently storing data so that data retrieval is easy
1. Linear Data Structure
* Array and string
* arraylist and string building
* linkel list
* stack, sequence, deque
* hashmap & heap

2. Non-Linear Data structure
* tree & graphs

# Algorithms - set of instructions/code to solve a problem
* Two pointer, sliding window
* greedy algorithms
* searching & sorting
* divide & conquer
* DP
* Graph algorithms



ASCII value - unique numbers associated with the character on the keyboard that the computer understands.
eg: A --> 65 (known by computer)
Full list:
1 = 49 // 49+0............... 1 = 49
2 = 50 // 49+1
3 = 51
.
.
9 = 57 // 49+8


A = 65 // 65+0................ A = 65
B = 66 // 65+1
C = 67 // 65+2
.
.
Z = 90 // 65+25.


a = 97 // 97+0................ a = 97
b = 98 // 97+1
c = 99 // 97+2
.
.
z = 122 // 97+25.




# syntax:-
eg:
import java.io.*;
import java.util.*;

public class 'NAME OF FUNCTION' {
    public static void main(String[] args) {
--BODY--
    }
}




# Data Types:-
1. Integer (int) 4 bytes - 1,2,-3,...
2. Character (char) 2 bytes - digit, alphabet, special character, symbole,...
3. Float (float) 4 bytes - 978.458,...
4. Double (double) 8 bytes - greater than float
5. Long (long) 8 bytes - greater than int
6. Boolean (boolean) 1 bytes - true/false



# disable code:-
// - used for single line

/*
*/ - use for para



# take input:-
Scanner 'NAME OF INPUT' = new Scanner(System.in);
eg:- Scanner s = new Scanner(System.in);


* for INTEGER value:-
Int 'NAME OF INTEGER' = 'NAME OF INPUT'.nextInt();
eg:- Int a = s.nextInt();

--built in functions--

@to find length:-
eg:
INPUT
int a = 123456789;
int 'NAME' = String.valueOf(a).length();
OUTPUT
NAME will give 9.



* for STRING value:- 
written in double quote eg:- "apple"
String 'NAME OF STRING' = "...";
eg:- String accNumber = "Aditya";

--built in functions--

@to find length:-
eg:
INPUT
String a = "Apple";
int 'NAME' = a.length();
OUTPUT
NAME will gite 5.


@to generate character at index:-
eg:
INPUT
String n = "jatin";
char 'NAME' = n.charAt('2');
OUTPUT
NMAE will give t.


@to take string input:-
eg:
INPUT
Scanner s = new Scanner(System.in);
String name = s.nextLine();
OUTPUT
--compiler will ask to enter string value--



* for CHARACTER value:-
--built in functions--

@to take one character input:-
eg:
INPUT
Scanner s = new Scanner(System.in);
Char a = s.next().charAt(0);
OUTPUT
--compiler will ask to enter one character value--



# generate output:-
System.out.println('NAME OF ASSIGNED INTEGER');
eg:- System.out.println(a);



# conversion:-
@int - char
eg:1
INPUT
int num = 70;
char ch = (char)num;
OUTPUT
F 'because 70 is F'

eg:2
INPUT
String i = "7";
char c = i.charAt(0);
int r = ch-48;
OUTPUT
7 'it will convert string 7 to integer 7 value'


@char - input
eg:
INPUT
Char ch = "D";
int num = (int)ch;
OUTPUT
68 'because D is 68 in ascii value'




# Defination - int a;
# Initalization - a=6;
# Declaration - int a=6;




# Type of operators:-
1. Arithmetic Operators
2. Assignment Operators
3. Urinary Operators
4. Relational Operators
5. Terniary operators
6. Logical operators
7. Conditional Operators




1. Arithmetic Operators:-
+ - addition
- - subtraction
* - multiplication
/ - division(quotient)
% - modulus - division(reminder)



2. Assignment Operators:-
a=5;
b=a;
now b = 5.



3. Urinary Operators:-
+=
-=
*=
/=

eg: 
a=5,
a=a+1 or a += 1; //add 1 to a//
now a = 6.



4. Relational Operators:- //used to compare
x==y = equal to
x!=y = not equal to
a > b
a < b
a >= b
a <= b



5. Terniary Operators:-
'condition' ? "True" : "False"
eg: (System.out.println(a>b ? "True" : "False");




6. Logical Operators:-
&& - and operator
|| - or operator
!= - not equals to operator



7. Conditional Operators:-
* if condition
eg:
if('condition'){
--body--
}




* if else condition
eg:
if('condition'){
--body--
}
else
{
--body--
}




* if else if condition
eg:
if('condition'){
--body--
}
else if
{
--body--
}
else if
{
--body--
}
.
.
.
else
{
--body--
}




* Nested if else:- if inside if
eg:
if('condition')
{
    if('condition'){
    --body--
    }
--body--
}



* Switch case
eg:
int a = 2;
switch (a)
{
case 1: 
--body--
break;

case 2:
--body--
break;
.
.
.
default:
--body--
}




# LOOPS :-
1. for loop
2. while loop
3. do-while loop
4. for-each loop



1. for loop
syntax:
for(initialization; condition; degradation)
{
--body--
}

eg:
for (int i = 0; i < 5; i++) {
  System.out.println(i);
}


initialization : assigning the value 
condition : execute until it is true, otherwise execution will stop (when to stop)
degradation : by how much we have to move

note: we dont need to set all the 3 parameters of syntax, it will not through any error but it will go till infinity




2. while loop
syntax:
int i = ('value');
while('condition for i')
{
--body--
break; or continue;
}

eg:
int i = 0;
while (i < 5) {
  System.out.println(i);
  i++;
}




3. do-while loop
syntax:
do 
{
--body--
}
while (condition);

note: difference between while and do-while is that at least for one time do-while code will execute because it checks the condition after running one time

eg:
int i = 0;
do {
  System.out.println(i);
  i++;
}
while (i < 5);




4. for-each loop
syntax:
for (type 'variable' : 'Name') {
--body--
}

note: for-each condition executes from starting index to ending index for one time each

eg:
String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};
for (String i : cars) {
  System.out.println(i);
}




# FUNCTION : it is used not to write a particular note again and again for a particular task
syntax:
return_type function_name(parameter_passing)
{
--body--
}




Types of function:-
1. Parameterised
2. Non-Parameterised




1. Parameterised : when function needs parameter from the user
in this case "int / boolean / ect" return types are used
eg:
public static int sum(int a, int b)
{
int sum = a+b;
return sum;
}

@how to call the Parameterised function:-
int result = function_name('parameters');
System.out.println(result);

note: Parameterised function should always be called and stored in new variable




2. Non-Parameterised : when function does not needs parameters from the user
in this case "void" return type is used
eg:
public static void greetings()
{
System.out.println("Hello");
}

note: it does not take any paramater and will not return anything just print the function when it is called

@how to call the Non-Parameterised function:-
function_name();



# Array : it is a collection of data of similar type of elements 
to store a particular type of data in a single matrix
syntax:
data_type name_of_array[] = new data_type[size_of_array];

eg:1
int a[] = {1,2,3}

eg:2
int a[] = new int[3];
a[0] = 1;
a[1] = 2;
a[2] = 3;

To print the declared array:-
int n = a.length;
for(int i=0; i<n.length; i++)
{
System.out.println(a[i]);
}
OUTPUT will be : {1,2,3}

note : in array index starts from 0 and goes till n-1.

you can also input values of array by using loop
eg:
Scanner s = new Scanner(System.in)
int a[] = new int[3];
for(int i=0; i<2; i++)
{
a[i] = s.nextInt();
}


@to pass array in function :-

--main function code--
int arr[] = {1,2,3};
int a = sum(arr);
System.out.println(a);

--sum function code--
public static int sum(int[] arr)
{
int sum = 0;
    for(int i=0; i<arr.length; i++)
    {
    sum += arr[i];
    }
return sum;
}



@to pass array in function and get array as return :-

--main function code--
int arr[] = {1,2,3};
int[] a = add1(arr);
for(int i=0; i<a.length; i++)
{
System.out.println(a[i]);
}

--sum function code--
public static int[] add1(int[] arr)
{
    for(int i=0; i<arr.length; i++)
    {
    arr[i] = arr[i] + 1;
    }
return arr;
}




# Time complexity : time consumed by programme for execution
1. Best case : if the result gets at the starting of the indexes, referred as "Big omega"
2. Average case : if the result gets at the middle of the indexes, referred as "Big Theta"
3. worst case : if the result gets at the ending of the indexes, referred as "Big Oo"

Note: The worst case is always considered to operate on it


# defined as per timing :-
1. Constant time complexity : when for each initialization same time is taken
eg:
int a = 1 //1 order
int b = 69; //2 order
int c = 100000000000; //3 order
in this case "order of (3)" / "o(3)" time complexity is taken by the programme because all initialization is constant and takes same time


2. Linear time complexity : "order of n" when only 1 time loop executes.
eg:
for(int i=0; i<n; i++)
{
--body--
}
in this case "order of n" time complexity is taken by the programme


3. Quadratic time complexity : "order of n^2" when 1 time loop executes under another loop.
eg:
for(int i=0; i<n; i++)
{
    for(int j=0; j<n; j++)
    {
    --body--
    }
--body--
}
in this case "order of n^2" time complexity is taken by the programme



3. Cubic time complexity : "order of n^3" when 1 time loop executes under another loop of another loop.
eg:
for(int i=0; i<n; i++)
{
    for(int j=0; j<n; j++)
    {
    --body--
        for(int j=0; j<n; j++)
        {
        --body--
        }
    }
--body--
}
in this case "order of n^3" time complexity is taken by the programme



4. logarithmic time complexity : "order of (log n)"




# SORTING : either in Ascending or descending order
1. Bubble sort : compare 2 adjacent elements
syntax:
Arrays.sort(arr); // for ascending order
Arrays.sort(arr, Collections.reverseOrder()); // for descending order

2. Selection sort : selecting the smallest value and placing it on the 1st index
3. Insertion sort : assuming that 1st index element is already sorted and others are not
4. Quick sort
5. Merge sort




# COMPARATOR : used for custom sorting, using our own logic to sort.
it is an interface.

method 1 : custom sorting
syntax:
Integer arr[] = new Integer[n]; //use thie integer data type
public static class 'NAME OF COMPARATOR' implements Comparator <Integer>
{
@override
public int compare(Integer a, Integer b)
    {
    return a-b;
    }
}


method 2 : Lemda function
syntax:

Integer arr[] = new Integer[n]; //use thie integer data type
Arrays.sort('NAME OF ARRAY', (a,b)->{return a*a-b*b;});

    note: a-b for ascending order, b-a for descending order.

*its TIME complexicity is 'n Log n' because it uses quick and merge method.
* +1 = value will be placed first that is ascending order
* -1 = value will be placed second that is descending order



# SUBARRAYS : Combination of all the elements of arrays.
eg:
{1,2,3}
its subarrays will be :
-> 1
-> 1,2
-> 1,2,3
-> 2
-> 2,3

syntax:
for(int start=0; start<n; start++){
    for(int end=start; end<n; end++){
        for(int i=start; i<=end; i++){
            System.out.print(nums[i]+" ");
        }
        System.out.println();
    }
}




























ONE LINER CODES / SHORT CUTS:
*to copy exact array --> int exp[] = Arrays.copyOf(arr,n);



